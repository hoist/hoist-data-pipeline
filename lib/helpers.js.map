{"version":3,"sources":["helpers.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;QAUG,iBAAiB,GAAjB,iBAAiB;QA2BjB,yBAAyB,GAAzB,yBAAyB;QAUzB,qBAAqB,GAArB,qBAAqB;;;;yBA9Cf,WAAW;;;;uBACb,SAAS;;;;;;;;;;;AAQtB,SAAS,iBAAiB,CAAC,IAAI,EAAE,OAAO,EAAE;AAC/C,MAAI,QAAQ,GAAG,QAAQ,CAAC;AACxB,MAAI,OAAO,CAAC,MAAM,EAAE;AAClB,YAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;GAC/B;AACD,SAAO,OAAO,CAAC,WAAW,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,4BAAU,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;CACnF;;AAGD,SAAS,QAAQ,CAAC,IAAI,EAAE;AACtB,MAAI,CAAC,IAAI,CAAC,GAAG,EAAE;AACb,QAAI,CAAC,GAAG,GAAG,2BAAS,CAAC;GACtB;AACD,SAAO,IAAI,CAAC;CACb;;AAED,SAAS,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE;AAC9B,MAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAChC,SAAO,IAAI,CAAC;CACb;;;;;;;;;AAQM,SAAS,yBAAyB,CAAC,IAAI,EAAE,QAAQ,EAAE;AACxD,SAAO,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;CAC7C;;;;;;;;AAQM,SAAS,qBAAqB,CAAC,QAAQ,EAAE;AAC9C,UAAQ,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;AACnC,UAAQ,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;AACnC,SAAO,QAAQ,CAAC;CACjB","file":"helpers.js","sourcesContent":["'use strict';\nimport pluralize from 'pluralize';\nimport shortid from 'shortid';\n\n/**\n * given a type and context resolve the collection name\n * @param {string} type - this instance type\n * @param {object} context - the current context\n * @returns {string} the collection name to use\n */\nexport function getCollectionName(type, context) {\n  var bucketId = 'global';\n  if (context.bucket) {\n    bucketId = context.bucket._id;\n  }\n  return context.environment + \":\" + bucketId + \":\" + pluralize(type).toLowerCase();\n}\n\n\nfunction ensureId(json) {\n  if (!json._id) {\n    json._id = shortid();\n  }\n  return json;\n}\n\nfunction ensureType(type, json) {\n  json._type = type.toLowerCase();\n  return json;\n}\n\n/**\n * adds any required fields to the instance\n * @param {string} type - the type of the instance\n * @param {object} instance - the instance to transform\n * @returns {object} the transformed instance\n */\nexport function requiredFieldsTransformer(type, instance) {\n  return ensureId(ensureType(type, instance));\n}\n\n/**\n * adds timestamps to an instance\n * @param {object} instance - the instance to transform\n * @returns {object} the transformed instance\n */\n\nexport function timestampsTransformer(instance) {\n  instance._createdDate = new Date();\n  instance._updatedDate = new Date();\n  return instance;\n}\n"],"sourceRoot":"/source/"}