{"version":3,"sources":["mongo_connection.js"],"names":[],"mappings":"AAAA;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA,mBAAS,YAAT,CAAsB,kBAAQ,WAAR,CAAtB;;;;;IAIM;;;;;AAIJ,WAJI,eAIJ,GAAc;0BAJV,iBAIU;;AACZ,SAAK,YAAL,GAAoB,kBAAQ,WAAR,CADR;AAEZ,SAAK,OAAL,GAAe,iBAAO,KAAP,CAAa;AAC1B,WAAK,KAAK,WAAL,CAAiB,IAAjB;KADQ,CAAf,CAFY;GAAd;;eAJI;;sCAWc;;;AAChB,aAAO,KAAK,YAAL,CACJ,YADI,CACS,iBAAO,GAAP,CAAW,0BAAX,CADT,EAEJ,IAFI,CAEC,UAAC,UAAD,EAAgB;;AAEpB,cAAK,OAAL,CAAa,IAAb,CAAkB,mBAAlB,EAFoB;AAGpB,cAAK,WAAL,GAAmB,UAAnB,CAHoB;AAIpB,cAAK,WAAL,CAAiB,EAAjB,CAAoB,OAApB,EAA6B,YAAM;AACjC,iBAAO,MAAK,WAAL,CAD0B;SAAN,CAA7B,CAJoB;AAOpB,2BAAS,YAAT,CAAsB,MAAK,WAAL,CAAtB,CAPoB;AAQpB,eAAO,UAAP,CARoB;OAAhB,CAFR,CADgB;;;;;;;;;;4BAmBV;AACN,UAAI,CAAC,KAAK,WAAL,EAAkB;AACrB,eAAO,QAAQ,OAAR,EAAP,CADqB;OAAvB;AAGA,UAAI,aAAa,KAAK,WAAL,CAJX;AAKN,aAAO,KAAK,WAAL,CALD;AAMN,aAAO,WAAW,UAAX,EAAP,CANM;;;;;;;;;;2BAaD;AACL,UAAI,KAAK,WAAL,EAAkB;AACpB,eAAO,QAAQ,OAAR,CAAgB,KAAK,WAAL,CAAvB,CADoB;OAAtB,MAEO;AACL,eAAO,KAAK,eAAL,EAAP,CADK;OAFP;;;;SA5CE;;;kBAqDS,IAAI,eAAJ","file":"mongo_connection.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nimport mongodb from 'mongodb';\nimport config from 'config';\nimport logger from '@hoist/logger';\nBluebird.promisifyAll(mongodb.MongoClient);\n/**\n * marshalling class for connection to mongodb\n */\nclass MongoConnection {\n  /**\n   * create a new instance\n   */\n  constructor() {\n    this._mongoClient = mongodb.MongoClient;\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n\n  _openConnection() {\n    return this._mongoClient\n      .connectAsync(config.get('Hoist.mongo.applications'))\n      .then((connection) => {\n        //close connection after 2 seconds of inactivity\n        this._logger.info('connection opened');\n        this._connection = connection;\n        this._connection.on('close', () => {\n          delete this._connection;\n        });\n        Bluebird.promisifyAll(this._connection);\n        return connection;\n      });\n  }\n\n  /**\n   * close any open connection to mongo\n   * @returns {Promise}\n   */\n  close() {\n    if (!this._connection) {\n      return Promise.resolve();\n    }\n    let connection = this._connection;\n    delete this._connection;\n    return connection.closeAsync();\n  }\n\n  /**\n   * Attempt to reuse mongo connection or open one if it doesn't exist\n   * @returns {Promise}\n   */\n  open() {\n    if (this._connection) {\n      return Promise.resolve(this._connection);\n    } else {\n      return this._openConnection();\n    }\n\n  }\n}\n\nexport default new MongoConnection();\n"],"sourceRoot":"/source/"}