{"version":3,"sources":["mongo_connection.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;wBACQ,UAAU;;;;uBACX,SAAS;;;;sBACV,QAAQ;;;;2BACR,eAAe;;;;AAClC,sBAAS,YAAY,CAAC,qBAAQ,WAAW,CAAC,CAAC;;;;;IAIrC,eAAe;;;;;AAIR,WAJP,eAAe,GAIL;0BAJV,eAAe;;AAKjB,QAAI,CAAC,YAAY,GAAG,qBAAQ,WAAW,CAAC;AACxC,QAAI,CAAC,OAAO,GAAG,yBAAO,KAAK,CAAC;AAC1B,SAAG,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;KAC3B,CAAC,CAAC;GACJ;;eATG,eAAe;;WAWJ,2BAAG;;;AAChB,aAAO,IAAI,CAAC,YAAY,CACrB,YAAY,CAAC,oBAAO,GAAG,CAAC,0BAA0B,CAAC,CAAC,CACpD,IAAI,CAAC,UAAC,UAAU,EAAK;;AAEpB,cAAK,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AACvC,cAAK,WAAW,GAAG,UAAU,CAAC;AAC9B,cAAK,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,YAAM;AACjC,iBAAO,MAAK,WAAW,CAAC;SACzB,CAAC,CAAC;AACH,8BAAS,YAAY,CAAC,MAAK,WAAW,CAAC,CAAC;AACxC,eAAO,UAAU,CAAC;OACnB,CAAC,CAAC;KACN;;;;;;;;WAMI,iBAAG;AACN,UAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AACrB,eAAO,OAAO,CAAC,OAAO,EAAE,CAAC;OAC1B;AACD,UAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;AAClC,aAAO,IAAI,CAAC,WAAW,CAAC;AACxB,aAAO,UAAU,CAAC,UAAU,EAAE,CAAC;KAChC;;;;;;;;WAMG,gBAAG;AACL,UAAI,IAAI,CAAC,WAAW,EAAE;AACpB,eAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;OAC1C,MAAM;AACL,eAAO,IAAI,CAAC,eAAe,EAAE,CAAC;OAC/B;KAEF;;;SAlDG,eAAe;;;qBAqDN,IAAI,eAAe,EAAE","file":"mongo_connection.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nimport mongodb from 'mongodb';\nimport config from 'config';\nimport logger from '@hoist/logger';\nBluebird.promisifyAll(mongodb.MongoClient);\n/**\n * marshalling class for connection to mongodb\n */\nclass MongoConnection {\n  /**\n   * create a new instance\n   */\n  constructor() {\n    this._mongoClient = mongodb.MongoClient;\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n\n  _openConnection() {\n    return this._mongoClient\n      .connectAsync(config.get('Hoist.mongo.applications'))\n      .then((connection) => {\n        //close connection after 2 seconds of inactivity\n        this._logger.info('connection opened');\n        this._connection = connection;\n        this._connection.on('close', () => {\n          delete this._connection;\n        });\n        Bluebird.promisifyAll(this._connection);\n        return connection;\n      });\n  }\n\n  /**\n   * close any open connection to mongo\n   * @returns {Promise}\n   */\n  close() {\n    if (!this._connection) {\n      return Promise.resolve();\n    }\n    let connection = this._connection;\n    delete this._connection;\n    return connection.closeAsync();\n  }\n\n  /**\n   * Attempt to reuse mongo connection or open one if it doesn't exist\n   * @returns {Promise}\n   */\n  open() {\n    if (this._connection) {\n      return Promise.resolve(this._connection);\n    } else {\n      return this._openConnection();\n    }\n\n  }\n}\n\nexport default new MongoConnection();\n"],"sourceRoot":"/source/"}