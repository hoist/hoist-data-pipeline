{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"AAAA;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAMA;;;;AACA;;;;;;;;;;;;IAIM;;;;;AAIJ,WAJI,YAIJ,GAAc;0BAJV,cAIU;;AACZ,SAAK,WAAL,8BADY;AAEZ,QAAI,sBAAJ,CAFY;AAGZ,QAAI,UAAU,kBAAQ,OAAR,EAAV,CAHQ;AAIZ,QAAI,WAAW,QAAQ,WAAR,EAAqB;AAClC,sBAAgB,QAAQ,WAAR,CAAoB,GAApB,CADkB;KAApC;AAGA,SAAK,OAAL,GAAe,iBAAO,KAAP,CAAa;AAC1B,WAAK,KAAK,WAAL,CAAiB,IAAjB;AACL,qBAAe,aAAf;KAFa,CAAf,CAPY;GAAd;;;;;;;;;;eAJI;;yBAuBC,MAAM,YAAY;;;AACrB,UAAI,WAAW,GAAG,MAAH,CAAU,UAAV,CAAX,CADiB;AAErB,WAAK,OAAL,CAAa,IAAb,CAAkB,aAAlB,EAFqB;AAGrB,aAAO,kBAAQ,GAAR,GAAc,IAAd,CAAmB,UAAC,OAAD,EAAa;AACrC,cAAK,OAAL,CAAa,IAAb,CAAkB,oBAAlB,EADqC;AAErC,eAAO,MAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAxB,CAA6B,UAAC,UAAD,EAAgB;AAClD,iBAAO,QAAQ,GAAR,CAAY,SAAS,GAAT,CAAa,UAAC,GAAD,EAAS;AACvC,mBAAO,QAAQ,OAAR,CAAgB,wCAA0B,IAA1B,EAAgC,GAAhC,CAAhB,EACJ,IADI,CACC,UAAC,IAAD,EAAU;AACd,qBAAO,oCAAsB,IAAtB,CAAP,CADc;aAAV,CADD,CAGF,IAHE,CAGG,UAAC,IAAD,EAAU;AAChB,oBAAK,OAAL,CAAa,IAAb,CAAkB,kBAAlB,EADgB;AAEhB,kBAAI,KAAK,WAAW,EAAX,CAAc,QAAQ,WAAR,CAAoB,OAApB,CAAnB,CAFY;AAGhB,kBAAI,aAAa,mBAAS,YAAT,CAAsB,GAAG,UAAH,CAAc,gCAAkB,KAAK,KAAL,EAAY,OAA9B,CAAd,CAAtB,CAAb,CAHY;AAIhB,kBAAI,cAAc,IAAI,IAAJ,EAAd,CAJY;AAKhB,kBAAI,KAAK,YAAL,EAAmB;AACrB,8BAAc,KAAK,YAAL,CADO;AAErB,uBAAO,KAAK,YAAL,CAFc;eAAvB;AAIA,kBAAI,KAAK,KAAK,GAAL,CATO;AAUhB,qBAAO,KAAK,GAAL,CAVS;AAWhB,qBAAO,WAAW,cAAX,CAA0B;AAC/B,qBAAK,EAAL;eADK,EAEJ;AACD,sBAAM,IAAN;AACA,8BAAc;AACZ,gCAAc,WAAd;iBADF;eAJK,EAOJ;AACD,wBAAQ,IAAR;eARK,EASJ,IATI,CASC,YAAM;AACZ,sBAAK,OAAL,CAAa,IAAb,CAAkB,mBAAlB,EADY;AAEZ,uBAAO,WAAW,YAAX,CAAwB;AAC7B,uBAAK,EAAL;iBADK,CAAP,CAFY;eAAN,CATR,CAXgB;aAAV,CAHV,CADuC;WAAT,CAAzB,CAAP,CADkD;SAAhB,CAApC,CAFqC;OAAb,CAAnB,CAqCJ,IArCI,CAqCC,UAAC,SAAD,EAAe;AACrB,YAAI,CAAC,eAAK,OAAL,CAAa,UAAb,CAAD,EAA2B;AAC7B,cAAI,UAAU,MAAV,GAAmB,CAAnB,EAAsB;AACxB,gBAAI,UAAU,MAAV,GAAmB,CAAnB,EAAsB;AACxB,qBAAO,IAAP,CADwB;aAA1B,MAEO;AACL,qBAAO,UAAU,CAAV,CAAP,CADK;aAFP;WADF;SADF;AASA,eAAO,SAAP,CAVqB;OAAf,CArCR,CAHqB;;;;;;;;;;;;yBA4DlB,MAAM,OAAO;;;AAChB,WAAK,OAAL,CAAa,IAAb,CAAkB,cAAlB,EADgB;AAEhB,aAAO,kBAAQ,GAAR,GAAc,IAAd,CAAmB,UAAC,OAAD,EAAa;AACrC,eAAK,OAAL,CAAa,IAAb,CAAkB,yBAAlB,EADqC;AAErC,eAAO,OAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAxB,CAA6B,UAAC,UAAD,EAAgB;;AAElD,cAAI,KAAK,WAAW,EAAX,CAAc,QAAQ,WAAR,CAAoB,OAApB,CAAnB,CAF8C;AAGlD,cAAI,aAAa,GAAG,UAAH,CAAc,gCAAkB,IAAlB,EAAwB,OAAxB,CAAd,CAAb,CAH8C;AAIlD,iBAAO,mBAAS,YAAT,CAAsB,WAAW,IAAX,CAAgB,KAAhB,CAAtB,EAA8C,YAA9C,GACJ,IADI,CACC,UAAC,OAAD,EAAa;AACjB,mBAAK,OAAL,CAAa,IAAb,CAAkB,gBAAlB,EADiB;AAEjB,mBAAO,QAAQ,OAAR,CAAgB,OAAhB,CAAP,CAFiB;WAAb,CADR,CAJkD;SAAhB,CAApC,CAFqC;OAAb,CAA1B,CAFgB;;;;;;;;;;;;4BAuBV,MAAM,OAAO;;;AACnB,WAAK,OAAL,CAAa,IAAb,CAAkB,gBAAlB,EADmB;AAEnB,aAAO,kBAAQ,GAAR,GAAc,IAAd,CAAmB,UAAC,OAAD,EAAa;AACrC,eAAK,OAAL,CAAa,IAAb,CAAkB,oBAAlB,EADqC;AAErC,eAAO,OAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAxB,CAA6B,UAAC,UAAD,EAAgB;AAClD,cAAI,KAAK,WAAW,EAAX,CAAc,QAAQ,WAAR,CAAoB,OAApB,CAAnB,CAD8C;AAElD,cAAI,aAAa,mBAAS,YAAT,CAAsB,GAAG,UAAH,CAAc,gCAAkB,IAAlB,EAAwB,OAAxB,CAAd,CAAtB,CAAb,CAF8C;AAGlD,iBAAO,WAAW,YAAX,CAAwB,KAAxB,EACJ,IADI,CACC,UAAC,OAAD,EAAa;AACjB,mBAAK,OAAL,CAAa,IAAb,CAAkB,gBAAlB,EADiB;AAEjB,mBAAO,OAAP,CAFiB;WAAb,CADR,CAHkD;SAAhB,CAApC,CAFqC;OAAb,CAA1B,CAFmB;;;;;;;;;;;;2BAsBd,MAAM,OAAO;;;AAClB,WAAK,OAAL,CAAa,IAAb,CAAkB,eAAlB,EADkB;AAElB,aAAO,kBAAQ,GAAR,GAAc,IAAd,CAAmB,UAAC,OAAD,EAAa;AACrC,eAAK,OAAL,CAAa,IAAb,CAAkB,oBAAlB,EADqC;AAErC,eAAO,OAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAxB,CAA6B,UAAC,UAAD,EAAgB;AAClD,cAAI,KAAK,WAAW,EAAX,CAAc,QAAQ,WAAR,CAAoB,OAApB,CAAnB,CAD8C;AAElD,cAAI,aAAa,mBAAS,YAAT,CAAsB,GAAG,UAAH,CAAc,gCAAkB,IAAlB,EAAwB,OAAxB,CAAd,CAAtB,CAAb,CAF8C;AAGlD,iBAAO,WAAW,WAAX,CAAuB,KAAvB,EACJ,IADI,CACC,UAAC,OAAD,EAAa;AACjB,mBAAK,OAAL,CAAa,IAAb,CAAkB,cAAlB,EADiB;AAEjB,mBAAO,OAAP,CAFiB;WAAb,CADR,CAHkD;SAAhB,CAApC,CAFqC;OAAb,CAA1B,CAFkB;;;;SAhIhB;;;AAiJN,aAAa,gBAAb;;kBAEe","file":"pipeline.js","sourcesContent":["'use strict';\nimport util from 'util';\nimport mongoConnection from './mongo_connection';\nimport Context from '@hoist/context';\nimport {\n  requiredFieldsTransformer,\n  timestampsTransformer,\n  getCollectionName\n}\nfrom './helpers';\nimport Bluebird from 'bluebird';\nimport logger from '@hoist/logger';\n/**\n * application data api pipeline\n */\nclass DataPipeline {\n  /**\n   * create a new pipeline\n   */\n  constructor() {\n    this._connection = mongoConnection;\n    let applicationId;\n    let context = Context.current();\n    if (context && context.application) {\n      applicationId = context.application._id;\n    }\n    this._logger = logger.child({\n      cls: this.constructor.name,\n      applicationId: applicationId\n    });\n  }\n\n  /**\n   * save an object or set of objects as a type\n   * @param {string} type - the object types\n   * @param {object|Array<object>} objOrArray - the object(s) to save\n   * @returns {Promise}\n   */\n  save(type, objOrArray) {\n    var arrayObj = [].concat(objOrArray);\n    this._logger.info('saving data');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection');\n      return this._connection.open().then((connection) => {\n        return Promise.all(arrayObj.map((obj) => {\n          return Promise.resolve(requiredFieldsTransformer(type, obj))\n            .then((data) => {\n              return timestampsTransformer(data);\n            }).then((data) => {\n              this._logger.info('sending to mongo');\n              var db = connection.db(context.application.dataKey);\n              var collection = Bluebird.promisifyAll(db.collection(getCollectionName(data._type, context)));\n              var createdDate = new Date();\n              if (data._createdDate) {\n                createdDate = data._createdDate;\n                delete data._createdDate;\n              }\n              var id = data._id;\n              delete data._id;\n              return collection.updateOneAsync({\n                _id: id\n              }, {\n                $set: data,\n                $setOnInsert: {\n                  _createdDate: createdDate\n                }\n              }, {\n                upsert: true\n              }).then(() => {\n                this._logger.info('finding post save');\n                return collection.findOneAsync({\n                  _id: id\n                });\n              });\n            });\n\n        }));\n      });\n    }).then((savedData) => {\n      if (!util.isArray(objOrArray)) {\n        if (savedData.length < 2) {\n          if (savedData.length < 1) {\n            return null;\n          } else {\n            return savedData[0];\n          }\n        }\n      }\n      return savedData;\n    });\n  }\n\n  /**\n   * finds all objects of type matching the given query\n   * @param {string} type - the object types\n   * @param {object} query - a mongo style query\n   * @returns {Promise}\n   */\n  find(type, query) {\n    this._logger.info('finding data');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection data');\n      return this._connection.open().then((connection) => {\n        //throw new Error();\n        var db = connection.db(context.application.dataKey);\n        var collection = db.collection(getCollectionName(type, context));\n        return Bluebird.promisifyAll(collection.find(query)).toArrayAsync()\n          .then((results) => {\n            this._logger.info('retrieved data');\n            return Promise.resolve(results);\n          });\n      });\n    });\n  }\n\n  /**\n   * finds a single object of type matching the given query\n   * @param {string} type - the object types\n   * @param {object} query - a mongo style query\n   * @returns {Promise}\n   */\n  findOne(type, query) {\n    this._logger.info('finding single');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection');\n      return this._connection.open().then((connection) => {\n        var db = connection.db(context.application.dataKey);\n        var collection = Bluebird.promisifyAll(db.collection(getCollectionName(type, context)));\n        return collection.findOneAsync(query)\n          .then((results) => {\n            this._logger.info('retrieved data');\n            return results;\n          });\n      });\n    });\n  }\n\n  /**\n   * removes all objects of type matching the given query\n   * @param {string} type - the object types\n   * @param {object} query - a mongo style query\n   * @returns {Promise}\n   */\n  remove(type, query) {\n    this._logger.info('removing data');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection');\n      return this._connection.open().then((connection) => {\n        var db = connection.db(context.application.dataKey);\n        var collection = Bluebird.promisifyAll(db.collection(getCollectionName(type, context)));\n        return collection.removeAsync(query)\n          .then((results) => {\n            this._logger.info('removed data');\n            return results;\n          });\n      });\n    });\n  }\n}\n\nDataPipeline._mongoConnection = mongoConnection;\n\nexport default DataPipeline;\n"],"sourceRoot":"/source/"}