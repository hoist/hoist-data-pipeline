{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"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","file":"pipeline.js","sourcesContent":["'use strict';\nimport util from 'util';\nimport mongoConnection from './mongo_connection';\nimport Context from '@hoist/context';\nimport {\n  requiredFieldsTransformer,\n  timestampsTransformer,\n  getCollectionName\n}\nfrom './helpers';\nimport Bluebird from 'bluebird';\nimport logger from '@hoist/logger';\n/**\n * application data api pipeline\n */\nclass DataPipeline {\n  /**\n   * create a new pipeline\n   */\n  constructor() {\n    this._connection = mongoConnection;\n    let applicationId;\n    let context = Context.current();\n    if (context && context.application) {\n      applicationId = context.application._id;\n    }\n    this._logger = logger.child({\n      cls: this.constructor.name,\n      applicationId: applicationId\n    });\n  }\n\n  /**\n   * save an object or set of objects as a type\n   * @param {string} type - the object types\n   * @param {object|Array<object>} objOrArray - the object(s) to save\n   * @returns {Promise}\n   */\n  save(type, objOrArray) {\n    var arrayObj = [].concat(objOrArray);\n    this._logger.info('saving data');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection');\n      return this._connection.open().then((connection) => {\n        return Promise.all(arrayObj.map((obj) => {\n          return Promise.resolve(requiredFieldsTransformer(type, obj))\n            .then((data) => {\n              return timestampsTransformer(data);\n            }).then((data) => {\n              this._logger.info('sending to mongo');\n              var db = connection.db(context.application.dataKey);\n              var collection = Bluebird.promisifyAll(db.collection(getCollectionName(data._type, context)));\n              var createdDate = new Date();\n              if (data._createdDate) {\n                createdDate = data._createdDate;\n                delete data._createdDate;\n              }\n              var id = data._id;\n              delete data._id;\n              return collection.updateOneAsync({\n                _id: id\n              }, {\n                $set: data,\n                $setOnInsert: {\n                  _createdDate: createdDate\n                }\n              }, {\n                upsert: true\n              }).then(() => {\n                this._logger.info('finding post save');\n                return collection.findOneAsync({\n                  _id: id\n                });\n              });\n            });\n\n        }));\n      });\n    }).then((savedData) => {\n      if (!util.isArray(objOrArray)) {\n        if (savedData.length < 2) {\n          if (savedData.length < 1) {\n            return null;\n          } else {\n            return savedData[0];\n          }\n        }\n      }\n      return savedData;\n    });\n  }\n\n  /**\n   * finds all objects of type matching the given query\n   * @param {string} type - the object types\n   * @param {object} query - a mongo style query\n   * @returns {Promise}\n   */\n  find(type, query) {\n    this._logger.info('finding data');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection data');\n      return this._connection.open().then((connection) => {\n        //throw new Error();\n        var db = connection.db(context.application.dataKey);\n        var collection = db.collection(getCollectionName(type, context));\n        return Bluebird.promisifyAll(collection.find(query)).toArrayAsync()\n          .then((results) => {\n            this._logger.info('retrieved data');\n            return Promise.resolve(results);\n          });\n      });\n    });\n  }\n\n  /**\n   * finds a single object of type matching the given query\n   * @param {string} type - the object types\n   * @param {object} query - a mongo style query\n   * @returns {Promise}\n   */\n  findOne(type, query) {\n    this._logger.info('finding single');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection');\n      return this._connection.open().then((connection) => {\n        var db = connection.db(context.application.dataKey);\n        var collection = Bluebird.promisifyAll(db.collection(getCollectionName(type, context)));\n        return collection.findOneAsync(query)\n          .then((results) => {\n            this._logger.info('retrieved data');\n            return results;\n          });\n      });\n    });\n  }\n\n  /**\n   * removes all objects of type matching the given query\n   * @param {string} type - the object types\n   * @param {object} query - a mongo style query\n   * @returns {Promise}\n   */\n  remove(type, query) {\n    this._logger.info('removing data');\n    return Context.get().then((context) => {\n      this._logger.info('opening connection');\n      return this._connection.open().then((connection) => {\n        var db = connection.db(context.application.dataKey);\n        var collection = Bluebird.promisifyAll(db.collection(getCollectionName(type, context)));\n        return collection.removeAsync(query)\n          .then((results) => {\n            this._logger.info('removed data');\n            return results;\n          });\n      });\n    });\n  }\n}\n\nDataPipeline._mongoConnection = mongoConnection;\n\nexport default DataPipeline;\n"],"sourceRoot":"/source/"}